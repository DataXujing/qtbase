\documentclass[article,shortnames]{jss}
%\usepackage{Sweave}

\newcommand{\Qt}{\pkg{Qt}}
\newcommand{\R}{\proglang{R}}
\newcommand{\qtbase}{\pkg{qtbase}}
\newcommand{\cpp}{\proglang{C++}}

\newcommand{\Rfunction}[1]{\code{#1()}}
\newcommand{\Rclass}[1]{\textsf{``#1''}}
\newcommand{\Qtclass}[1]{\textsf{#1}}


\title{Developing Graphical User Interfaces in \R\ with \Qt{}}

\author{Michael Lawrence \\ Genentech \And Deepayan Sarkar \\
  Indian Statistical Institute}

\Plainauthor{Michael Lawrence, Deepayan Sarkar}
\Plaintitle{Developing R GUIs with Qt} 

\Abstract{ It is often desirable to program an \R\ GUI in the \R\ 
  language itself. We present infrastructure for programming a GUI in
  \R\ through an interface to the \Qt\ toolkit, a \cpp\ application
  library that provides a collection of widgets, the fundamental
  building blocks of a GUI. We will introduce the basics of the
  interface and give several examples of its application to GUI
  development. Some advanced topics, including the ability to extend
  the \cpp\ classes of \Qt\ in \R{}, are discussed. The interface is
  implemented by the \qtbase\ package, available at
  \url{http://github.com/ggobi/qtbase}.  }

\Keywords{graphical user interface, GUI, \R{}, \Qt{}}
\Plainkeywords{graphical user interface, GUI, R, Qt}

\Address{Michael Lawrence\\
  Bioinformatics and Computational Biology\\
  Genentech Research and Early Development\\
  South San Francisco, CA, USA\\
  E-mail: michafla@gene.com\\
  \\
  Deepayan Sarkar\\
  Theoretical Statistics and Mathematics Unit\\
  Indian Statistical Institute, Delhi Centre\\
  7 SJSS Marg, New Delhi 110016, India\\
  E-mail: deepayan.sarkar@r-project.org\\
}

\begin{document}

\section{Introduction}

R is typically accessed via the command line, so it is no surprise
that the most popular R GUIs are graphical shells around a
console. Such interfaces offer simple, general utilities, such
as switching the working directory or fitting a basic linear
model. More complex tasks are usually best left to the command line,
except when a GUI is developed specifically for a particular task and
is able to abstract away the unnecessary details. An example would be
a wizard for analysis of gene expression microarrays, where the user
is led from preprocessing through to the detection of differentially
expressed genes. Given the high frequency at which such use cases are
encountered, it is desirable to implement GUIs directly in \R{},
avoiding the difficulties and overhead involved in cross-language
development.

This paper introduces infrastructure for developing GUIs in \R\ 
through an interface to the \Qt\ toolkit, a \cpp\ application library
developed by Nokia. \Qt\ consists of a number of modules, and
principal among them is the GUI module, which provides a collection of
widgets, the graphical controls that serve as the fundamental building
blocks of a GUI. Other interesting \Qt\ modules include a WebKit web
browser implementation, enabling hybrid desktop and web applications,
and an OpenGL-based renderer for hardware accelerated graphics. An
automatic installer for the entirety of \Qt\ is available from Nokia
for the major platforms, including Windows and Mac.

The interface between \R\ and \Qt\ is primarily implemented by the
\qtbase\ package. The interface is low-level, in that the \R\ user
directly constructs instances of \Qt\ classes and calls their
methods. All of the \Qt\ modules are accessible through the
interface. There are currently several packages that extend
\qtbase\ for particular applications. These include \pkg{qtpaint}, for
efficient interactive graphics, and \pkg{qtutils}, which includes
utilities such as an object browser and an \R\ graphics device based
on the \Qt\ graphics engine.

A number of other packages enable GUI construction in \R\ by
interfacing with external libraries. The \pkg{tcltk} package provides
access to the \proglang{Tcl/Tk} GUI toolkit. It is often the
convenient option, as \pkg{tcltk} is bundled with \R{}. However,
\proglang{Tcl/Tk} offers fewer and less sophisticated widgets compared
to \Qt{}. The \pkg{RGtk2} package interfaces \R\ with the \pkg{GTK+}
toolkit and several of its dependencies. \pkg{GTK+} may be more
accessible than \Qt\ to the typical \R\ programmer, because \Qt\ 
requires a stronger understanding of technical topics like memory
management and object-oriented inheritance. However, \pkg{GTK+} falls
short of \Qt\ in terms of features, particularly in the areas of
graphics and web integration. The \pkg{Swing} toolkit is available
through \R\ and \proglang{Java} interfaces like \pkg{rJava} and
\pkg{SJava}. \Qt\ compares favorably to \pkg{Swing}, although
\pkg{Swing} has the advantage of integration with the extensive
\proglang{Java} platform.

The next section will introduce the fundamentals of the interface and
its application to GUI development. We will follow with several
examples of programming a practical GUI in \R\ with \Qt. 

\section{Fundamentals}

\subsection{Clases and Objects}
\label{sec:objects}

\subsection{Widgets and Layout}
\label{sec:widgets}

\section{Examples}

The \qtbase\ package itself provides very low-level access to \Qt\
classes and methods.  Developing useful GUIs involves additional work,
paralleling the process of building a GUI in \cpp\ using \Qt{}, except
of course that the language used is \R\ instead of \cpp{}.  We will
first describe a few examples already implemented in the \pkg{qtutils}
package, followed by a more involved (but simpler) example developed
from scratch.

\subsection{An object browser}
\label{sec:browser}

The \pkg{qtutils} package contains several GUIs developed using
\pkg{qtbase}, primarily as proof-of-concept illustrations, but with
eventual real-life use in mind.  These applications are typically
created by calling suitable functions that return a widget, shown by
its print method (usually invoked by auto-printing).  One such
function is \Rfunction{qstr}, a graphical analog of \Rfunction{str}.
\Rfunction{qstr} is a (S3) generic function, allowing for specific
methods for various \R\ classes.  The default method simply captures
the results of \Rfunction{print} called on the object and displays it
in a \Qtclass{QTextEdit}.  However, obvious candidates for specific
methods are the \Rclass{data.frame} and \Rclass{matrix} classes, which
can be displayed using the spreadsheet-like \Qtclass{QTableWidget}.
For example, one might inspect the \code{iris} dataset using (result
not shown)
<<echo=FALSE>>=
library(qtutils)
w <- qstr(iris)
w
@ 
%
Another specific (and less trivial) method is available for the
\Rclass{list} and \Rclass{environment} classes.  


\subsection{Debugging: a graphical replacement for \code{recover}}
\label{sec:debug}



\subsection{A graphics device}
\label{sec:device}

\subsection{An interactive demo}
\label{sec:intdemo}



\subsection{Going further}
\label{sec:more}

These examples barely start to explore the possibilities, and have
been chosen to highlight the use of traditional GUI elements used
through the \qtbase\ API.  Richer applications can be developed using
\Qt{}'s own efficient interactive graphics capabilities, ...

\section{Conclusion}

%\bibliography{qt-gui}

\end{document}
